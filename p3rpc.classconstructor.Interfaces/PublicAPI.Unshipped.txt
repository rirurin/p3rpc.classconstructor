#nullable enable
abstract ProcessEventParameterBase.AddToAllocation(nint pos) -> void
abstract ProcessEventParameterBase.RetrieveValue(nint pParams) -> void
override ProcessEventParameterPointer.AddToAllocation(nint pos) -> void
override ProcessEventParameterPointer.RetrieveValue(nint pParams) -> void
override ProcessEventParameterReference.AddToAllocation(nint pos) -> void
override ProcessEventParameterReference.RetrieveValue(nint pParams) -> void
override ProcessEventParameterValue.AddToAllocation(nint pos) -> void
override ProcessEventParameterValue.RetrieveValue(nint pParams) -> void
p3rpc.classconstructor.Interfaces.IClassMethods
p3rpc.classconstructor.Interfaces.IClassMethods.AddUnrealClassExtender(string! targetClass, uint newSize, p3rpc.classconstructor.Interfaces.IClassMethods.InternalConstructor? ctorHook = null) -> void
p3rpc.classconstructor.Interfaces.IClassMethods.InternalConstructor
p3rpc.classconstructor.Interfaces.IObjectMethods
p3rpc.classconstructor.Interfaces.IObjectMethods.AddFName(string! name) -> p3rpc.nativetypes.Interfaces.FName
p3rpc.classconstructor.Interfaces.IObjectMethods.DoesClassMatch(p3rpc.nativetypes.Interfaces.UObject* tgtObj, string! name) -> bool
p3rpc.classconstructor.Interfaces.IObjectMethods.DoesNameMatch(p3rpc.nativetypes.Interfaces.UObject* tgtObj, string! name) -> bool
p3rpc.classconstructor.Interfaces.IObjectMethods.FindAllObjectsNamed(string! targetObj, string? objType = null) -> System.Collections.Generic.ICollection<nint>!
p3rpc.classconstructor.Interfaces.IObjectMethods.FindAllOf(string! objType) -> System.Collections.Generic.ICollection<nint>!
p3rpc.classconstructor.Interfaces.IObjectMethods.FindAllOfAsync(string! objType, System.Action<System.Collections.Generic.ICollection<nint>!>! foundCb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.FindFirstOf(string! objType) -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.FindFirstOf<TObjectType>() -> TObjectType*
p3rpc.classconstructor.Interfaces.IObjectMethods.FindFirstOfAsync(string! objType, System.Action<nint>! foundCb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.FindFirstSubclassOf(p3rpc.nativetypes.Interfaces.UClass* super) -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.FindFirstSubclassOf(string! objType) -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.FindObject(string! targetObj, string? objType = null) -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.FindObject<TObjectType>(string! targetObj) -> TObjectType*
p3rpc.classconstructor.Interfaces.IObjectMethods.FindObjectAsync(string! targetObj, string? objType, System.Action<nint>! foundCb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.FindObjectAsync(string! targetObj, System.Action<nint>! foundCb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.FindObjectFast(string! objName, p3rpc.nativetypes.Interfaces.UObject* outer, string! objClass) -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.FindObjectFast<TObjectType>(string! objName, p3rpc.nativetypes.Interfaces.UObject* outer) -> TObjectType*
p3rpc.classconstructor.Interfaces.IObjectMethods.GetEngineTransient() -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.GetFName(p3rpc.nativetypes.Interfaces.FName name) -> string!
p3rpc.classconstructor.Interfaces.IObjectMethods.GetFName(string! name) -> p3rpc.nativetypes.Interfaces.FName
p3rpc.classconstructor.Interfaces.IObjectMethods.GetFullName(p3rpc.nativetypes.Interfaces.UObject* obj) -> string!
p3rpc.classconstructor.Interfaces.IObjectMethods.GetFunction(p3rpc.nativetypes.Interfaces.UObject* obj, string! name, out p3rpc.nativetypes.Interfaces.UFunction* outFunc) -> bool
p3rpc.classconstructor.Interfaces.IObjectMethods.GetObjectName(p3rpc.nativetypes.Interfaces.UObject* obj) -> string!
p3rpc.classconstructor.Interfaces.IObjectMethods.GetObjectType(p3rpc.nativetypes.Interfaces.UObject* obj) -> string!
p3rpc.classconstructor.Interfaces.IObjectMethods.GetSubsystem(p3rpc.nativetypes.Interfaces.UGameInstance* gameInstance, string! subsystem) -> nint
p3rpc.classconstructor.Interfaces.IObjectMethods.GetSubsystem<TSubsystem>(p3rpc.nativetypes.Interfaces.UGameInstance* gameInstance) -> TSubsystem*
p3rpc.classconstructor.Interfaces.IObjectMethods.GetType(string! type) -> p3rpc.nativetypes.Interfaces.UClass*
p3rpc.classconstructor.Interfaces.IObjectMethods.GetTypeAsync(string! type, System.Action<nint>! foundCb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.IsObjectSubclassOf(p3rpc.nativetypes.Interfaces.UObject* obj, p3rpc.nativetypes.Interfaces.UClass* type) -> bool
p3rpc.classconstructor.Interfaces.IObjectMethods.MarkObjectAsRoot(p3rpc.nativetypes.Interfaces.UObject* obj) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.NotifyOnNewObject(p3rpc.nativetypes.Interfaces.UClass* type, System.Action<nint>! cb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.NotifyOnNewObject(string! typeName, System.Action<nint>! cb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.NotifyOnNewObject<TNotifyType>(System.Action<nint>! cb) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.ProcessEvent(p3rpc.nativetypes.Interfaces.UObject* obj, string! funcName) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.ProcessEvent(p3rpc.nativetypes.Interfaces.UObject* obj, string! funcName, params ProcessEventParameterBase![]! funcParams) -> void
p3rpc.classconstructor.Interfaces.IObjectMethods.ProcessEvent<TReturnType>(p3rpc.nativetypes.Interfaces.UObject* obj, string! funcName) -> TReturnType
p3rpc.classconstructor.Interfaces.IObjectMethods.ProcessEvent<TReturnType>(p3rpc.nativetypes.Interfaces.UObject* obj, string! funcName, params ProcessEventParameterBase![]! funcParams) -> TReturnType
p3rpc.classconstructor.Interfaces.IObjectMethods.SpawnActor(p3rpc.nativetypes.Interfaces.UClass* type) -> p3rpc.nativetypes.Interfaces.AActor*
p3rpc.classconstructor.Interfaces.IObjectMethods.SpawnActor(string! type) -> p3rpc.nativetypes.Interfaces.AActor*
p3rpc.classconstructor.Interfaces.IObjectMethods.SpawnActor<TActorType>() -> TActorType*
p3rpc.classconstructor.Interfaces.IObjectMethods.SpawnObject(p3rpc.nativetypes.Interfaces.UClass* type, p3rpc.nativetypes.Interfaces.UObject* owner, p3rpc.nativetypes.Interfaces.FName? name = null) -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.SpawnObject(string! type, p3rpc.nativetypes.Interfaces.UObject* owner, p3rpc.nativetypes.Interfaces.FName? name = null) -> p3rpc.nativetypes.Interfaces.UObject*
p3rpc.classconstructor.Interfaces.IObjectMethods.SpawnObject(string! type, p3rpc.nativetypes.Interfaces.UObject* owner, string! name) -> p3rpc.nativetypes.Interfaces.UObject*
ProcessEventParameterBase
ProcessEventParameterBase.Name.get -> string!
ProcessEventParameterBase.Name.set -> void
ProcessEventParameterBase.ProcessEventParameterBase(string! name, nint value, nint size) -> void
ProcessEventParameterBase.Size.get -> nint
ProcessEventParameterBase.Size.set -> void
ProcessEventParameterBase.Value.get -> nint
ProcessEventParameterBase.Value.set -> void
ProcessEventParameterFactory
ProcessEventParameterPointer
ProcessEventParameterPointer.ProcessEventParameterPointer(string! name, nint value, nint size) -> void
ProcessEventParameterReference
ProcessEventParameterReference.ProcessEventParameterReference(string! name, nint value, nint size) -> void
ProcessEventParameterValue
ProcessEventParameterValue.ProcessEventParameterValue(string! name, nint value, nint size) -> void
static ProcessEventParameterFactory.MakeByteParameter(string! pName, byte In) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeFloatParameter(string! pName, float In) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeIntParameter(string! pName, int In) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeShortParameter(string! pName, short In) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeStructParameterOut<TType>(string! pName, TType* value) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeStructParameterRef<TType>(string! pName, TType* value) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeStructParameterValue<TType>(string! pName, TType* value) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeUintParameter(string! pName, uint In) -> ProcessEventParameterBase!
static ProcessEventParameterFactory.MakeUshortParameter(string! pName, ushort In) -> ProcessEventParameterBase!